{"version":3,"file":"static/chunks/pages/fcl/authn-refresh-8e4ca393a52d68a8.js","mappings":"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","sources":["webpack://_N_E/./contexts/AuthnRefreshContext.tsx","webpack://_N_E/./hooks/useAuthnRefreshContext.ts","webpack://_N_E/./pages/fcl/authn-refresh.tsx","webpack://_N_E/./src/services.ts","webpack://_N_E/./src/accountAuth.ts","webpack://_N_E/./src/scopes.ts","webpack://_N_E/?b96c"],"sourcesContent":["import React, {createContext, useEffect, useState} from \"react\"\nimport {WalletUtils} from \"@onflow/fcl\"\nimport {parseScopes} from \"src/scopes\"\n\ntype AuthnRefreshContextType = {\n  address: string\n  keyId: number\n  scopes: Set<string>\n  nonce: string | undefined\n  appIdentifier: string | undefined\n} | null\n\nexport const AuthnRefreshContext = createContext<AuthnRefreshContextType>(null)\n\nexport function AuthnRefreshContextProvider({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const [value, setValue] = useState<any>(null)\n\n  useEffect(() => {\n    function callback(data: any) {\n      const {timestamp, appDomainTag} = data.body\n\n      const service = data.service\n      const address = service?.data?.address\n      const keyId = service?.data?.keyId\n      const scopes = new Set(parseScopes(service?.params?.scopes))\n\n      setValue({\n        address,\n        keyId,\n        scopes,\n        timestamp,\n        appDomainTag,\n      })\n    }\n\n    WalletUtils.ready(callback)\n  }, [])\n\n  return (\n    <AuthnRefreshContext.Provider value={value}>\n      {children}\n    </AuthnRefreshContext.Provider>\n  )\n}\n","import {AuthnRefreshContext} from \"contexts/AuthnRefreshContext\"\nimport {useContext} from \"react\"\n\nconst useAuthnRefreshContext = () => {\n  return useContext(AuthnRefreshContext)\n}\n\nexport default useAuthnRefreshContext\n","/** @jsxImportSource theme-ui */\n\nimport {AuthnRefreshContextProvider} from \"contexts/AuthnRefreshContext\"\nimport useAuthnRefreshContext from \"hooks/useAuthnRefreshContext\"\nimport {refreshAuthn} from \"src/accountAuth\"\nimport Dialog from \"components/Dialog\"\nimport {fetchConfigFromAPI} from \"contexts/ConfigContext\"\n\nfunction AuthnRefreshDialog({\n  flowAccountPrivateKey,\n}: {\n  flowAccountPrivateKey: string\n}) {\n  const data = useAuthnRefreshContext()\n\n  if (data) {\n    const {address, keyId, scopes, nonce, appIdentifier} = data\n\n    refreshAuthn(\n      flowAccountPrivateKey,\n      address,\n      keyId,\n      scopes,\n      nonce,\n      appIdentifier\n    )\n  }\n\n  // TODO: improve UI\n  // e.g. add prompt to confirm reauthentication\n  return <Dialog root={true}>Refreshing...</Dialog>\n}\n\nfunction AuthnRefresh({\n  flowAccountPrivateKey,\n}: {\n  flowAccountPrivateKey: string\n}) {\n  return (\n    <AuthnRefreshContextProvider>\n      <AuthnRefreshDialog flowAccountPrivateKey={flowAccountPrivateKey} />\n    </AuthnRefreshContextProvider>\n  )\n}\n\nAuthnRefresh.getInitialProps = async () => {\n  const {flowAccountPrivateKey} = await fetchConfigFromAPI()\n\n  return {\n    flowAccountPrivateKey: flowAccountPrivateKey,\n  }\n}\n\nexport default AuthnRefresh\n","const PROFILE_SCOPES = new Set(\n  \"name family_name given_name middle_name nickname preferred_username profile picture website gender birthday zoneinfo locale updated_at\"\n    .trim()\n    .split(/\\s+/)\n)\nconst EMAIL_SCOPES = new Set(\"email email_verified\".trim().split(/\\s+/))\n\ntype CompositeSignature = {\n  f_type: string\n  f_vsn: string\n  addr: string\n  keyId: number\n  signature: string\n}\n\ntype AuthResponseService = {\n  f_type: string\n  f_vsn: string\n  type: string\n  uid: string\n  endpoint?: string\n  id?: string\n  method?: string\n  data?: Record<\n    string,\n    string | boolean | number | null | Array<CompositeSignature> | unknown\n  >\n  identity?: {\n    address: string\n    keyId?: number\n  }\n  provider?: {\n    address: string | null\n    name: string\n    icon: string | null\n    description: string\n  }\n  params?: Record<string, string>\n}\n\nconst intersection = (a: Set<string>, b: Set<string>) =>\n  new Set([...a].filter(x => b.has(x)))\n\nfunction entries<T>(arr: Array<T> = []) {\n  const arrEntries = [arr].flatMap(a => a).filter(Boolean) as Iterable<\n    readonly [PropertyKey, string]\n  >\n  return Object.fromEntries(arrEntries)\n}\n\nconst entry = (\n  scopes: Set<string>,\n  key: string,\n  value: string | boolean | number\n) => scopes.has(key) && [key, value]\n\nexport const buildServices = ({\n  baseUrl,\n  address,\n  nonce,\n  scopes,\n  compSig,\n  keyId,\n  includeRefresh = false,\n}: {\n  baseUrl: string\n  address: string\n  nonce: string | undefined\n  scopes: Set<string>\n  compSig: string | undefined\n  keyId?: number\n  includeRefresh?: boolean\n}) => {\n  const services: AuthResponseService[] = [\n    {\n      f_type: \"Service\",\n      f_vsn: \"1.0.0\",\n      type: \"authn\",\n      uid: \"fcl-dev-wallet#authn\",\n      endpoint: `${baseUrl}/fcl/authn`,\n      id: address,\n      identity: {\n        address: address,\n      },\n      provider: {\n        address: null,\n        name: \"FCL Dev Wallet\",\n        icon: null,\n        description: \"For Local Development Only\",\n      },\n    },\n    {\n      f_type: \"Service\",\n      f_vsn: \"1.0.0\",\n      type: \"authz\",\n      uid: \"fcl-dev-wallet#authz\",\n      endpoint: `${baseUrl}/fcl/authz`,\n      method: \"IFRAME/RPC\",\n      identity: {\n        address: address,\n        keyId: Number(keyId),\n      },\n    },\n    {\n      f_type: \"Service\",\n      f_vsn: \"1.0.0\",\n      type: \"user-signature\",\n      uid: \"fcl-dev-wallet#user-sig\",\n      endpoint: `${baseUrl}/fcl/user-sig`,\n      method: \"IFRAME/RPC\",\n      id: address,\n      data: {addr: address, keyId: Number(keyId)},\n      params: {},\n    },\n  ]\n\n  // Account Proof Service\n  if (nonce) {\n    services.push({\n      f_type: \"Service\",\n      f_vsn: \"1.0.0\",\n      type: \"account-proof\",\n      method: \"DATA\",\n      uid: \"fcl-dev-wallet#account-proof\",\n      data: {\n        f_type: \"account-proof\",\n        f_vsn: \"1.0.0\",\n        address: address,\n        nonce: nonce,\n        signatures: [compSig] ?? null,\n      },\n    })\n  }\n\n  // Authentication Refresh Service\n  if (includeRefresh) {\n    services.push({\n      f_type: \"Service\",\n      f_vsn: \"1.0.0\",\n      type: \"authn-refresh\",\n      uid: \"fcl-dev-wallet#authn-refresh\",\n      endpoint: `${baseUrl}/fcl/authn-refresh`,\n      method: \"IFRAME/RPC\",\n      id: address,\n      data: {\n        f_type: \"authn-refresh\",\n        f_vsn: \"1.0.0\",\n        address: address,\n        keyId: Number(keyId),\n      },\n      params: {\n        sessionId: \"C7OXWaVpU-efRymW7a5d\",\n        scopes: Array.from(scopes).join(\" \"),\n      },\n    })\n  }\n\n  if (!!scopes.size) {\n    services.push({\n      f_type: \"Service\",\n      f_vsn: \"1.0.0\",\n      type: \"open-id\",\n      uid: \"fcl-dev-wallet#open-id\",\n      method: \"data\",\n      data: {\n        f_type: \"OpenID\",\n        f_vsn: \"1.0.0\",\n        ...entries([\n          intersection(PROFILE_SCOPES, scopes).size && [\n            \"profile\",\n            entries([\n              entry(scopes, \"name\", `name[${address}]`),\n              entry(scopes, \"family_name\", `family_name[${address}]`),\n              entry(scopes, \"given_name\", `given_name[${address}]`),\n              entry(scopes, \"middle_name\", `middle_name[${address}]`),\n              entry(scopes, \"nickname\", `nickname[${address}]`),\n              entry(\n                scopes,\n                \"preferred_username\",\n                `preferred_username[${address}]`\n              ),\n              entry(scopes, \"profile\", `https://onflow.org`),\n              entry(\n                scopes,\n                \"piture\",\n                `https://https://avatars.onflow.org/avatar/${address}`\n              ),\n              entry(scopes, \"website\", \"https://onflow.org\"),\n              entry(scopes, \"gender\", `gender[${address}]`),\n              entry(\n                scopes,\n                \"birthday\",\n                `0000-${new Date().getMonth() + 1}-${new Date().getDate()}`\n              ),\n              entry(scopes, \"zoneinfo\", `America/Vancouver`),\n              entry(scopes, \"locale\", `en`),\n              entry(scopes, \"updated_at\", Date.now()),\n            ]),\n          ],\n          intersection(EMAIL_SCOPES, scopes).size && [\n            \"email\",\n            entries([\n              entry(scopes, \"email\", `${address}@example.com`),\n              entry(scopes, \"email_verified\", true),\n            ]),\n          ],\n        ]),\n      },\n    })\n  }\n\n  return services\n}\n","import {WalletUtils} from \"@onflow/fcl\"\nimport {ConnectedAppConfig} from \"hooks/useConnectedAppConfig\"\nimport {Account} from \"src/accounts\"\nimport {sign} from \"src/crypto\"\nimport getConfig from \"next/config\"\nimport {buildServices} from \"./services\"\n\ntype AccountProofData = {\n  address: string\n  nonce: string | undefined\n  appIdentifier: string | undefined\n}\n\nconst {publicRuntimeConfig} = getConfig()\n\nconst getSignature = (key: string, accountProofData: AccountProofData) => {\n  return sign(key, WalletUtils.encodeAccountProof(accountProofData))\n}\n\nfunction proveAuthn(\n  flowAccountPrivateKey: string,\n  address: string,\n  keyId: number,\n  nonce: string | undefined,\n  appIdentifier: string | undefined\n) {\n  return {\n    addr: address,\n    keyId: keyId,\n    signature: getSignature(flowAccountPrivateKey, {\n      address,\n      nonce,\n      appIdentifier,\n    }),\n  }\n}\n\nexport function refreshAuthn(\n  flowAccountPrivateKey: string,\n  address: string,\n  keyId: number,\n  scopes: Set<string>,\n  nonce: string | undefined,\n  appIdentifier: string | undefined\n) {\n  const signature = getSignature(flowAccountPrivateKey, {\n    address,\n    nonce,\n    appIdentifier,\n  })\n\n  const compSig = new WalletUtils.CompositeSignature(address, keyId, signature)\n\n  const services = buildServices({\n    baseUrl: publicRuntimeConfig.baseUrl,\n    address,\n    nonce,\n    scopes,\n    compSig,\n    keyId,\n    includeRefresh: false,\n  })\n\n  WalletUtils.approve({\n    f_type: \"AuthnResponse\",\n    f_vsn: \"1.0.0\",\n    addr: address,\n    services,\n  })\n}\n\nexport async function chooseAccount(\n  flowAccountPrivateKey: string,\n  account: Account,\n  scopes: Set<string>,\n  connectedAppConfig: ConnectedAppConfig\n) {\n  const {address, keyId} = account\n\n  const {nonce, appIdentifier} = connectedAppConfig.body\n\n  let compSig\n  if (nonce) {\n    const {addr, signature} = proveAuthn(\n      flowAccountPrivateKey,\n      address,\n      keyId!,\n      nonce,\n      appIdentifier\n    )\n    compSig = new WalletUtils.CompositeSignature(addr, keyId, signature)\n  }\n\n  const services = buildServices({\n    baseUrl: publicRuntimeConfig.baseUrl,\n    address,\n    nonce,\n    scopes,\n    compSig,\n    keyId,\n    includeRefresh: false,\n  })\n\n  localStorage.setItem(\"connectedAppConfig\", JSON.stringify(connectedAppConfig))\n\n  WalletUtils.sendMsgToFCL(\"FCL:VIEW:RESPONSE\", {\n    addr: address,\n    services,\n  })\n}\n","export const parseScopes = (scopes?: string) =>\n  scopes?.trim()?.split(/\\s+/) ?? []\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/fcl/authn-refresh\",\n      function () {\n        return require(\"private-next-pages/fcl/authn-refresh.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/fcl/authn-refresh\"])\n      });\n    }\n  "],"names":["AuthnRefreshContext","createContext","AuthnRefreshContextProvider","children","useState","value","setValue","useEffect","WalletUtils","data","body","timestamp","appDomainTag","service","address","keyId","scopes","Set","parseScopes","params","Provider","useContext","AuthnRefreshDialog","flowAccountPrivateKey","useAuthnRefreshContext","nonce","appIdentifier","refreshAuthn","Dialog","root","AuthnRefresh","getInitialProps","fetchConfigFromAPI","PROFILE_SCOPES","trim","split","EMAIL_SCOPES","intersection","a","b","filter","x","has","entries","arr","arrEntries","flatMap","Boolean","Object","fromEntries","entry","key","buildServices","baseUrl","compSig","includeRefresh","services","f_type","f_vsn","type","uid","endpoint","id","identity","provider","name","icon","description","method","Number","addr","push","signatures","sessionId","Array","from","join","size","Date","getMonth","getDate","now","publicRuntimeConfig","getConfig","getSignature","accountProofData","sign","proveAuthn","signature","chooseAccount","account","connectedAppConfig","localStorage","setItem","JSON","stringify","window","__NEXT_P"],"sourceRoot":""}