{"version":3,"file":"static/chunks/313-f9e98a1155e3cdc2.js","mappings":"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","sources":["webpack://_N_E/./components/Button.tsx","webpack://_N_E/./components/Dialog.tsx","webpack://_N_E/./components/ExpandCollapseButton.tsx","webpack://_N_E/./contexts/AuthzContext.tsx","webpack://_N_E/./hooks/useAccounts.ts","webpack://_N_E/./hooks/useAuthzContext.ts","webpack://_N_E/./hooks/useVariants.ts","webpack://_N_E/./src/accounts.ts","webpack://_N_E/./src/authz.ts","webpack://_N_E/./src/constants.ts","webpack://_N_E/./src/crypto.ts","webpack://_N_E/./src/fclConfig.ts"],"sourcesContent":["/** @jsxImportSource theme-ui */\nimport useVariants from \"hooks/useVariants\"\nimport {useRef} from \"react\"\nimport {Button as ThemeUIButton, Link, ThemeUICSSObject} from \"theme-ui\"\n\ntype Props = {\n  variant?: \"primary\" | \"secondary\" | \"ghost\" | \"link\" | \"unstyled\"\n  size?: \"xs\" | \"sm\" | \"md\" | \"lg\"\n  block?: boolean\n  sx?: ThemeUICSSObject\n  disabled?: boolean\n  type?: \"submit\" | \"button\" | \"reset\"\n  href?: string\n  target?: \"_blank\"\n  onClick?: (event: React.MouseEvent<HTMLElement>) => void\n  children: React.ReactNode\n}\n\nconst Button = ({\n  variant = \"primary\",\n  size = \"md\",\n  block = false,\n  sx = {},\n  disabled,\n  href,\n  target,\n  ...props\n}: Props) => {\n  const ref = useRef<HTMLButtonElement>(null)\n  const variants = useVariants([\n    `buttons.${disabled ? \"disabled\" : variant}`,\n    `buttons.sizes.${size}`,\n    `${variant === \"unstyled\" ? \"buttons.unstyled\" : \"\"}`,\n  ])\n\n  const style: ThemeUICSSObject = {\n    display: \"inline-flex\",\n    cursor: \"pointer\",\n    textTransform: \"uppercase\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: block ? \"100%\" : \"auto\",\n    m: 0,\n    border: 0,\n    borderRadius: 4,\n    textDecoration: \"none\",\n    fontFamily: \"body\",\n    \"&:hover\": {\n      opacity: 0.8,\n    },\n    ...variants,\n    ...sx,\n  }\n\n  if (!!href) {\n    return (\n      <Link href={href} sx={style} target={target} {...props}>\n        {props.children}\n      </Link>\n    )\n  }\n\n  return (\n    <ThemeUIButton {...props} sx={style} ref={ref} disabled={disabled}>\n      {props.children}\n    </ThemeUIButton>\n  )\n}\n\nexport default Button\n","/** @jsxImportSource theme-ui */\nimport {Dialog as HUIDialog} from \"@headlessui/react\"\nimport {WalletUtils} from \"@onflow/fcl\"\nimport useAuthzContext from \"hooks/useAuthzContext\"\nimport {useRef} from \"react\"\nimport {Box, Button} from \"theme-ui\"\nimport {SXStyles} from \"types\"\nimport ExpandCollapseButton from \"./ExpandCollapseButton\"\n\nexport const styles: SXStyles = {\n  dialog: {\n    width: [\"100%\", 500],\n    height: \"90vh\",\n    margin: \"0 auto\",\n    backgroundColor: \"white\",\n    boxShadow: \"0px 4px 74px 0px #00000026\",\n    borderRadius: 8,\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  dialogExpanded: {\n    width: [\"100%\", \"100%\", \"100%\", 950],\n    minHeight: \"auto\",\n  },\n  header: {\n    position: \"sticky\",\n    zIndex: 1,\n    top: 0,\n  },\n  topHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    minHeight: 52,\n    pl: 3,\n    pr: 1,\n    borderBottom: \"1px solid\",\n    borderColor: \"gray.200\",\n    backgroundColor: \"white\",\n    borderTopLeftRadius: 8,\n    borderTopRightRadius: 8,\n  },\n  footer: {\n    position: \"sticky\",\n    zIndex: 1,\n    bottom: 0,\n  },\n  logo: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  logoText: {\n    ml: 1,\n    fontSize: 1,\n    color: \"gray.500\",\n    marginTop: 1,\n  },\n  closeButton: {\n    width: 30,\n    height: 30,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  \"closeButton:hover\": {\n    opacity: 0.5,\n  },\n  body: {\n    pt: 40,\n    px: [15, 30],\n    pb: 0,\n    display: \"flex\",\n    flexDirection: \"column\",\n    flex: 1,\n    overflowY: \"auto\",\n  },\n}\n\nexport default function Dialog({\n  title,\n  header,\n  footer,\n  root,\n  children,\n}: {\n  title?: string\n  header?: React.ReactNode\n  footer?: React.ReactNode\n  root?: boolean\n  children: React.ReactNode\n}) {\n  const closeButtonRef = useRef<HTMLButtonElement>(null)\n  const onClose = () => WalletUtils.close()\n  const {isExpanded, setCodePreview} = useAuthzContext()\n\n  return (\n    // @ts-expect-error The headless-ui dialog raises a \"Expression produces a union type that is too complex to represent\" error when used with theme-ui sx props\n    // See https://github.com/tailwindlabs/headlessui/issues/233, https://github.com/tailwindlabs/headlessui/issues/330\n    <HUIDialog\n      open={true}\n      onClose={onClose}\n      sx={{...styles.dialog, ...(isExpanded ? styles.dialogExpanded : {})}}\n      initialFocus={closeButtonRef}\n      data-test=\"dev-wallet\"\n    >\n      <HUIDialog.Overlay />\n\n      <div sx={{...styles.header, mb: isExpanded ? 0 : styles.header.mb}}>\n        <div sx={styles.topHeader}>\n          <div sx={styles.logo}>\n            <img src=\"/flow-logo.svg\" />\n            <span sx={styles.logoText}>\n              {[\"FCL Dev Wallet\", title].filter(Boolean).join(\" - \")}\n            </span>\n          </div>\n          {isExpanded ? (\n            <Box mr={2}>\n              <ExpandCollapseButton onClick={() => setCodePreview(null)} />\n            </Box>\n          ) : (\n            <Button\n              variant=\"unstyled\"\n              onClick={onClose}\n              sx={styles.closeButton}\n              ref={closeButtonRef}\n            >\n              <img src=\"/x-icon.svg\" />\n            </Button>\n          )}\n        </div>\n        {header}\n      </div>\n\n      {root ? (\n        children\n      ) : (\n        <>\n          <div\n            sx={{\n              ...styles.body,\n              pt: isExpanded ? 0 : styles.body.pt,\n              pb: isExpanded ? 0 : styles.body.pb,\n            }}\n          >\n            {children}\n          </div>\n          <div sx={styles.footer}>{footer}</div>\n        </>\n      )}\n    </HUIDialog>\n  )\n}\n","/** @jsxImportSource theme-ui */\nimport useAuthzContext from \"hooks/useAuthzContext\"\nimport {Flex} from \"theme-ui\"\nimport Button from \"./Button\"\n\nexport default function ExpandCollapseButton({onClick}: {onClick: () => void}) {\n  const {isExpanded} = useAuthzContext()\n\n  return (\n    <Button\n      variant=\"link\"\n      size=\"xs\"\n      onClick={onClick}\n      data-test=\"expand-collapse-button\"\n    >\n      {isExpanded ? \"collapse\" : \"expand\"}\n      <Flex ml={2} sx={{alignItems: \"center\", justifyContent: \"center\"}}>\n        <img src={`/${isExpanded ? \"collapse\" : \"expand\"}.svg`} />\n      </Flex>\n    </Button>\n  )\n}\n","import * as fcl from \"@onflow/fcl\"\nimport useAccounts from \"hooks/useAccounts\"\nimport {ConnectedAppConfig} from \"hooks/useConnectedAppConfig\"\nimport {Account} from \"src/accounts\"\nimport React, {createContext, useEffect, useMemo, useState} from \"react\"\nimport {WalletUtils} from \"@onflow/fcl\"\n\ntype AuthzReadyData = {\n  type: string\n  body: AuthSignable\n  service: Record<string, unknown>\n  config: {\n    services: {\"OpenID.scopes\": string}\n    app: {\n      icon: string\n      title: string\n    }\n  }\n}\n\nexport type ProposalKey = {\n  address: string\n  keyId: number\n  sequenceNum: number\n}\n\ntype AuthSignable = {\n  addr: string\n  args: string[]\n  cadence: string\n  f_type: \"Signable\"\n  f_vsn: string\n  keyId: number\n  message: string\n  roles: Record<string, boolean>\n  interaction: unknown\n  voucher: {\n    arguments: string[]\n    authorizers: string[]\n    cadence: string\n    computeLimit: number\n    payer: string\n    payloadSigs: string[]\n    proposalKey: ProposalKey\n    refBlock: string\n  }\n}\n\ntype CodePreview = {\n  title: string\n  value: string\n}\n\ntype AuthzContextType = {\n  currentUser: Account\n  proposer: Account\n  payer: Account\n  authorizers: Account[]\n  roles: Record<string, boolean>\n  proposalKey: ProposalKey\n  args: string[]\n  cadence: string\n  computeLimit: number\n  refBlock: string\n  message: string\n  codePreview: CodePreview | null\n  setCodePreview: React.Dispatch<React.SetStateAction<CodePreview | null>>\n  isExpanded: boolean\n  connectedAppConfig: ConnectedAppConfig | undefined\n}\n\nexport const AuthzContext = createContext<AuthzContextType>({\n  currentUser: {} as Account,\n  proposer: {} as Account,\n  payer: {} as Account,\n  authorizers: [],\n  roles: {},\n  proposalKey: {\n    address: \"\",\n    keyId: 0,\n    sequenceNum: 0,\n  },\n  args: [],\n  cadence: \"\",\n  computeLimit: 0,\n  refBlock: \"\",\n  message: \"\",\n  codePreview: null,\n  setCodePreview: () => null,\n  isExpanded: false,\n  connectedAppConfig: undefined,\n})\n\nexport function AuthzContextProvider({children}: {children: React.ReactNode}) {\n  const [signable, setSignable] = useState<AuthSignable | null>(null)\n  const [codePreview, setCodePreview] = useState<CodePreview | null>(null)\n\n  const {data: accountsData} = useAccounts()\n\n  useEffect(() => {\n    function callback(data: AuthzReadyData) {\n      setSignable(data.body)\n    }\n\n    WalletUtils.ready(callback)\n  }, [])\n\n  const accounts = useMemo(() => {\n    if (!accountsData) return {}\n    const hash: Record<string, Account> = {}\n    accountsData.forEach(account => (hash[account.address] = account))\n    return hash\n  }, [accountsData])\n\n  if (!signable || Object.entries(accounts).length === 0) return null\n\n  const {addr: currentUserAddress, voucher, roles, message} = signable\n  const savedConnectedAppConfig = localStorage.getItem(\"connectedAppConfig\")\n  const value = {\n    currentUser: accounts[fcl.withPrefix(currentUserAddress)],\n    proposer: accounts[fcl.withPrefix(voucher.proposalKey.address)],\n    payer: accounts[fcl.withPrefix(voucher.payer)],\n    authorizers: voucher.authorizers.map(\n      authorizer => accounts[fcl.withPrefix(authorizer)]\n    ),\n    roles,\n    proposalKey: voucher.proposalKey,\n    args: voucher.arguments,\n    cadence: voucher.cadence,\n    computeLimit: voucher.computeLimit,\n    refBlock: voucher.refBlock,\n    message,\n    codePreview,\n    setCodePreview,\n    isExpanded: codePreview !== null,\n    connectedAppConfig: savedConnectedAppConfig\n      ? JSON.parse(savedConnectedAppConfig)\n      : undefined,\n    appTitle: \"Test Harness\",\n    appIcon: \"https://placekitten.com/g/200/200\",\n  }\n\n  return <AuthzContext.Provider value={value}>{children}</AuthzContext.Provider>\n}\n","import {useEffect, useState} from \"react\"\nimport {Account, getAccounts} from \"src/accounts\"\n\nexport default function useAccounts() {\n  const [accounts, setAccounts] = useState<Array<Account>>([])\n  const [error, setError] = useState<any>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  function fetchAccounts() {\n    getAccounts()\n      .then(accounts => {\n        setAccounts(accounts)\n      })\n      .catch(error => {\n        setError(error)\n      })\n      .finally(() => setIsLoading(false))\n  }\n\n  useEffect(() => {\n    fetchAccounts()\n  }, [])\n\n  return {\n    data: accounts,\n    error: error,\n    isLoading: isLoading,\n    refresh: fetchAccounts,\n  }\n}\n","import {AuthzContext} from \"contexts/AuthzContext\"\nimport {useContext} from \"react\"\n\nconst useAuthzContext = () => {\n  return useContext(AuthzContext)\n}\n\nexport default useAuthzContext\n","// Adds support for multiple variants https://github.com/system-ui/theme-ui/issues/403#issuecomment-561322255\n\nimport {useResponsiveValue} from \"@theme-ui/match-media\"\nimport theme from \"src/theme\"\nimport {get} from \"theme-ui\"\n\nexport default function useVariants(...variantBlocks: string[][]) {\n  const variants = useResponsiveValue(variantBlocks)\n  let styles = {}\n  variants.map((variant: string) => {\n    styles = {...styles, ...get(theme, variant)}\n  })\n  return styles\n}\n","import * as fcl from \"@onflow/fcl\"\nimport * as t from \"@onflow/types\"\nimport {Optional} from \"types\"\n\nimport getAccountsScript from \"cadence/scripts/getAccounts.cdc\"\nimport getAccountScript from \"cadence/scripts/getAccount.cdc\"\nimport getFUSDBalanceScript from \"cadence/scripts/getFUSDBalance.cdc\"\nimport newAccountTransaction from \"cadence/transactions/newAccount.cdc\"\nimport updateAccountTransaction from \"cadence/transactions/updateAccount.cdc\"\nimport fundAccountFLOWTransaction from \"cadence/transactions/fundFLOW.cdc\"\nimport fundAccountFUSDTransaction from \"cadence/transactions/fundFUSD.cdc\"\n\nimport getConfig from \"next/config\"\n\nimport {authz} from \"src/authz\"\nimport {FLOW_EVENT_TYPES} from \"src/constants\"\nimport fclConfig from \"src/fclConfig\"\n\nimport {FLOW_TYPE, FUSD_TYPE, TokenType, TokenTypes} from \"src/constants\"\nimport {fetchConfigFromAPI} from \"contexts/ConfigContext\"\n\nconst {publicRuntimeConfig} = getConfig()\n\nexport type Account = {\n  type: \"ACCOUNT\"\n  address: string\n  scopes: string[]\n  keyId?: number\n  label?: string\n  balance?: string\n}\n\nexport type NewAccount = Optional<Account, \"address\">\n\ntype CreatedAccountResponse = {\n  events: CreatedAccountEvent[]\n}\n\ntype CreatedAccountEvent = {\n  type: string\n  data: {\n    address: string\n  }\n}\n\nexport async function getAccount(address: string) {\n  const {flowAccountAddress, flowAccessNode} = await fetchConfigFromAPI()\n\n  fclConfig(\n    flowAccessNode,\n    flowAccountAddress,\n    publicRuntimeConfig.contractFungibleToken,\n    publicRuntimeConfig.contractFlowToken,\n    publicRuntimeConfig.contractFUSD\n  )\n\n  return await fcl\n    .send([\n      fcl.script(getAccountScript),\n      fcl.args([fcl.arg(address, t.Address)]),\n    ])\n    .then(fcl.decode)\n}\n\nexport async function getAccounts() {\n  const {flowAccountAddress, flowAccessNode} = await fetchConfigFromAPI()\n\n  fclConfig(\n    flowAccessNode,\n    flowAccountAddress,\n    publicRuntimeConfig.contractFungibleToken,\n    publicRuntimeConfig.contractFlowToken,\n    publicRuntimeConfig.contractFUSD\n  )\n\n  const accounts = await fcl\n    .send([fcl.script(getAccountsScript)])\n    .then(fcl.decode)\n\n  const serviceAccount = accounts.find(\n    (acct: Account) => acct.address === flowAccountAddress\n  )\n\n  const userAccounts = accounts\n    .filter((acct: Account) => acct.address !== flowAccountAddress)\n    .sort((a: Account, b: Account) => a.label!.localeCompare(b.label!))\n\n  return [serviceAccount, ...userAccounts]\n}\n\nexport async function newAccount(label: string, scopes: [string]) {\n  const {flowAccountAddress, flowAccessNode, flowAccountPrivateKey} =\n    await fetchConfigFromAPI()\n  fclConfig(\n    flowAccessNode,\n    flowAccountAddress,\n    publicRuntimeConfig.contractFungibleToken,\n    publicRuntimeConfig.contractFlowToken,\n    publicRuntimeConfig.contractFUSD\n  )\n\n  const authorization = await authz(\n    flowAccountAddress,\n    publicRuntimeConfig.flowAccountKeyId,\n    flowAccountPrivateKey\n  )\n\n  const txId = await fcl\n    .send([\n      fcl.transaction(newAccountTransaction),\n      fcl.args([fcl.arg(label, t.String), fcl.arg(scopes, t.Array(t.String))]),\n      fcl.proposer(authorization),\n      fcl.payer(authorization),\n      fcl.limit(100),\n    ])\n    .then(fcl.decode)\n\n  const txStatus: CreatedAccountResponse = await fcl.tx(txId).onceSealed()\n\n  const createdAccountEvent = txStatus.events.find(\n    (e: CreatedAccountEvent) => e.type === FLOW_EVENT_TYPES.accountCreated\n  )\n  if (!createdAccountEvent?.data?.address) throw \"Account address not created\"\n\n  return createdAccountEvent.data.address\n}\n\nexport async function updateAccount(\n  address: string,\n  label: string,\n  scopes: [string]\n) {\n  const {flowAccountAddress, flowAccessNode, flowAccountPrivateKey} =\n    await fetchConfigFromAPI()\n  address = fcl.withPrefix(address)\n\n  fclConfig(\n    flowAccessNode,\n    flowAccountAddress,\n    publicRuntimeConfig.contractFungibleToken,\n    publicRuntimeConfig.contractFlowToken,\n    publicRuntimeConfig.contractFUSD\n  )\n\n  const authorization = await authz(\n    flowAccountAddress,\n    publicRuntimeConfig.flowAccountKeyId,\n    flowAccountPrivateKey\n  )\n\n  const txId = await fcl\n    .send([\n      fcl.transaction(updateAccountTransaction),\n      fcl.args([\n        fcl.arg(address, t.Address),\n        fcl.arg(label, t.String),\n        fcl.arg(scopes, t.Array(t.String)),\n      ]),\n      fcl.proposer(authorization),\n      fcl.payer(authorization),\n      fcl.limit(100),\n    ])\n    .then(fcl.decode)\n\n  await fcl.tx(txId).onceSealed()\n}\n\ntype Token = {\n  tx: string\n  amount: string\n}\n\ntype Tokens = Record<TokenType, Token>\n\nexport const TOKEN_FUNDING_AMOUNTS: Record<TokenTypes, string> = {\n  FLOW: publicRuntimeConfig.tokenAmountFLOW,\n  FUSD: publicRuntimeConfig.tokenAmountFUSD,\n}\n\nexport const tokens: Tokens = {\n  FLOW: {\n    tx: fundAccountFLOWTransaction,\n    amount: TOKEN_FUNDING_AMOUNTS[FLOW_TYPE],\n  },\n  FUSD: {\n    tx: fundAccountFUSDTransaction,\n    amount: TOKEN_FUNDING_AMOUNTS[FUSD_TYPE],\n  },\n}\n\nexport async function fundAccount(address: string, token: TokenType) {\n  const {flowAccountAddress, flowAccessNode, flowAccountPrivateKey} =\n    await fetchConfigFromAPI()\n  fclConfig(\n    flowAccessNode,\n    flowAccountAddress,\n    publicRuntimeConfig.contractFungibleToken,\n    publicRuntimeConfig.contractFlowToken,\n    publicRuntimeConfig.contractFUSD\n  )\n\n  if (![\"FUSD\", \"FLOW\"].includes(token)) {\n    throw \"Incorrect TokenType\"\n  }\n\n  const minterAuthz = await authz(\n    flowAccountAddress,\n    publicRuntimeConfig.flowAccountKeyId,\n    flowAccountPrivateKey\n  )\n\n  const acctAuthz = await authz(\n    address,\n    publicRuntimeConfig.flowAccountKeyId,\n    flowAccountPrivateKey\n  )\n\n  const {tx, amount} = tokens[token]\n\n  const authorizations =\n    token === FUSD_TYPE ? [minterAuthz, acctAuthz] : [minterAuthz]\n\n  const txId = await fcl\n    .send([\n      fcl.transaction(tx),\n      fcl.args([fcl.arg(address, t.Address), fcl.arg(amount, t.UFix64)]),\n      fcl.proposer(minterAuthz),\n      fcl.authorizations(authorizations),\n      fcl.payer(minterAuthz),\n      fcl.limit(9999),\n    ])\n    .then(fcl.decode)\n\n  await fcl.tx(txId).onceSealed()\n}\n\nexport async function getAccountFUSDBalance(address: string): Promise<number> {\n  const {flowAccountAddress, flowAccessNode} = await fetchConfigFromAPI()\n  fclConfig(\n    flowAccessNode,\n    flowAccountAddress,\n    publicRuntimeConfig.contractFungibleToken,\n    publicRuntimeConfig.contractFlowToken,\n    publicRuntimeConfig.contractFUSD\n  )\n\n  const balance = await fcl\n    .send([\n      fcl.script(getFUSDBalanceScript),\n      fcl.args([fcl.arg(address, t.Address)]),\n    ])\n    .then(fcl.decode)\n\n  return balance\n}\n","import * as fcl from \"@onflow/fcl\"\nimport {Account} from \"src/accounts\"\nimport {sign} from \"./crypto\"\n\n// alias Hex = String\n// type signable = { message: Hex, voucher: voucher }\n// type compositeSignature = { addr: String, keyId: Number, signature: Hex }\n// signingFunction :: signable -> compositeSignature\n// type account = { tempId: String, addr: String, keyId: Number, signingFunction: signingFunction }\n// authz :: account -> account\n\nexport async function authz(\n  flowAccountAddress: string,\n  flowAccountKeyId: string,\n  flowAccountPrivateKey: string\n) {\n  return (account: Account) => {\n    return {\n      // there is stuff in the account that is passed in\n      // you need to make sure its part of what is returned\n      ...account,\n      // the tempId here is a very special and specific case.\n      // what you are usually looking for in a tempId value is a unique string for the address and keyId as a pair\n      // if you have no idea what this is doing, or what it does, or are getting an error in your own\n      // implementation of an authorization function it is recommended that you use a string with the address and keyId in it.\n      // something like... tempId: `${address}-${keyId}`\n      tempId: \"SERVICE_ACCOUNT\",\n      addr: fcl.sansPrefix(flowAccountAddress), // eventually it wont matter if this address has a prefix or not, sadly :'( currently it does matter.\n      keyId: Number(flowAccountKeyId), // must be a number\n      signingFunction: (signable: {message: string}) => ({\n        addr: fcl.withPrefix(flowAccountAddress), // must match the address that requested the signature, but with a prefix\n        keyId: Number(flowAccountKeyId), // must match the keyId in the account that requested the signature\n        signature: sign(flowAccountPrivateKey, signable.message), // signable.message |> hexToBinArray |> hash |> sign |> binArrayToHex\n        // if you arent in control of the transaction that is being signed we recommend constructing the\n        // message from signable.voucher using the @onflow/encode module\n      }),\n    }\n  }\n}\n","export const FLOW_EVENT_TYPES = {\n  accountCreated: \"flow.AccountCreated\",\n}\n\nexport const LABEL_MISSING_ERROR = \"Label is required.\"\nexport const SERVICE_ACCOUNT_LABEL = \"Service Account\"\nexport const UNTITLED_APP_NAME = \"Untitled Dapp\"\n\nexport const FLOW_TYPE = \"FLOW\"\nexport const FUSD_TYPE = \"FUSD\"\n\nexport type TokenTypes = typeof FLOW_TYPE | typeof FUSD_TYPE\nexport type TokenType = \"FLOW\" | \"FUSD\"\n","import {ECDSA_P256, encodeKey, SHA3_256} from \"@onflow/util-encode-key\"\nimport {ec as EC} from \"elliptic\"\nimport {SHA3} from \"sha3\"\nconst ec = new EC(\"p256\")\n\nexport const encodeServiceKey = (flowAccountPublicKey: string) => {\n  return encodeKey(flowAccountPublicKey, ECDSA_P256, SHA3_256, 1000)\n}\n\nconst hashMsgHex = (msgHex: string) => {\n  const sha = new SHA3(256)\n  sha.update(Buffer.from(msgHex, \"hex\"))\n  return sha.digest()\n}\n\nexport function sign(privateKey: string, msgHex: string) {\n  const key = ec.keyFromPrivate(Buffer.from(privateKey, \"hex\"))\n  const sig = key.sign(hashMsgHex(msgHex))\n  const n = 32\n  const r = sig.r.toArrayLike(Buffer, \"be\", n)\n  const s = sig.s.toArrayLike(Buffer, \"be\", n)\n  return Buffer.concat([r, s]).toString(\"hex\")\n}\n","import {config} from \"@onflow/fcl\"\n\nexport default function fclConfig(\n  flowAccessNode: string,\n  flowAccountAddress: string,\n  contractFungibleToken: string,\n  contractFlowToken: string,\n  contractFUSD: string\n) {\n  config()\n    .put(\"accessNode.api\", flowAccessNode)\n    .put(\"0xSERVICE\", flowAccountAddress)\n    .put(\"0xFUNGIBLETOKENADDRESS\", contractFungibleToken)\n    .put(\"0xFLOWTOKENADDRESS\", contractFlowToken)\n    .put(\"0xFUSDADDRESS\", contractFUSD)\n}\n"],"names":["variant","size","block","sx","disabled","href","target","props","ref","useRef","style","display","cursor","textTransform","alignItems","justifyContent","width","m","border","borderRadius","textDecoration","fontFamily","opacity","useVariants","children","styles","dialog","height","margin","backgroundColor","boxShadow","flexDirection","dialogExpanded","minHeight","header","position","zIndex","top","topHeader","pl","pr","borderBottom","borderColor","borderTopLeftRadius","borderTopRightRadius","footer","bottom","logo","logoText","ml","fontSize","color","marginTop","closeButton","body","pt","px","pb","flex","overflowY","Dialog","title","root","closeButtonRef","onClose","WalletUtils","useAuthzContext","isExpanded","setCodePreview","open","initialFocus","mb","src","filter","Boolean","join","mr","onClick","ExpandCollapseButton","AuthzContext","createContext","currentUser","proposer","payer","authorizers","roles","proposalKey","address","keyId","sequenceNum","args","cadence","computeLimit","refBlock","message","codePreview","connectedAppConfig","undefined","AuthzContextProvider","useState","signable","setSignable","accountsData","useAccounts","data","useEffect","accounts","useMemo","hash","forEach","account","Object","entries","length","currentUserAddress","addr","voucher","savedConnectedAppConfig","localStorage","getItem","value","fcl","map","authorizer","arguments","JSON","parse","appTitle","appIcon","Provider","setAccounts","error","setError","isLoading","setIsLoading","fetchAccounts","getAccounts","then","refresh","useContext","variantBlocks","variants","useResponsiveValue","get","theme","publicRuntimeConfig","getConfig","getAccount","fetchConfigFromAPI","flowAccountAddress","flowAccessNode","fclConfig","contractFungibleToken","contractFlowToken","contractFUSD","getAccountScript","t","getAccountsScript","serviceAccount","find","acct","userAccounts","sort","a","b","label","localeCompare","newAccount","scopes","flowAccountPrivateKey","authz","flowAccountKeyId","authorization","newAccountTransaction","txId","onceSealed","txStatus","createdAccountEvent","events","e","type","FLOW_EVENT_TYPES","updateAccount","updateAccountTransaction","TOKEN_FUNDING_AMOUNTS","FLOW","tokenAmountFLOW","FUSD","tokenAmountFUSD","tokens","tx","amount","FLOW_TYPE","FUSD_TYPE","fundAccount","token","includes","minterAuthz","acctAuthz","authorizations","getAccountFUSDBalance","getFUSDBalanceScript","balance","tempId","Number","signingFunction","signature","sign","accountCreated","LABEL_MISSING_ERROR","SERVICE_ACCOUNT_LABEL","UNTITLED_APP_NAME","ec","EC","encodeServiceKey","flowAccountPublicKey","encodeKey","ECDSA_P256","SHA3_256","privateKey","msgHex","sig","keyFromPrivate","Buffer","from","sha","SHA3","update","digest","hashMsgHex","r","toArrayLike","s","concat","toString","config","put"],"sourceRoot":""}